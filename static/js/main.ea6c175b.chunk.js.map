{"version":3,"sources":["components/Header.js","components/MediaObject.js","components/CampaignVideos.js","components/CampaignTitle.js","components/Campaign.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Navbar","className","MediaObject","props","Fragment","src","media","cover_photo_url","alt","media_type","index_es","icon","faPlay","ButtonGroup","Button","onClick","navigator","clipboard","writeText","tracking_link","faLink","faDownload","CampaignVideos","medias","map","i","key","components_MediaObject","CampaignTitle","campaigns","singleCampaign","campaign_icon_url","campaign_name","pay_per_install","components_CampaignVideos","Campaign","_useState","useState","_useState2","Object","slicedToArray","error","setError","_useState3","_useState4","isLoaded","setIsLoaded","_useState5","_useState6","setCampaigns","useEffect","fetch","then","res","json","result","components_CampaignTitle","App","index_esm","onRefresh","window","location","reload","components_Header","components_Campaign","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ea6c175b.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Navbar } from 'reactstrap'\r\nimport './Header.css'\r\n\r\n// Simple Header (navbar) component at the top of the app\r\nfunction Header() {\r\n    return (\r\n        <Navbar className = 'header'>\r\n            <h1 className ='header_name' >INFLUENCER APP</h1>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport { ButtonGroup, Button } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faLink, faDownload, faPlay } from '@fortawesome/free-solid-svg-icons';\r\nimport './MediaObject.css';\r\n\r\nfunction MediaObject(props) {\r\n\r\n    //function for copying link to clipboard\r\n    const copyToClipboard = () => {\r\n        navigator.clipboard.writeText(props.media.tracking_link);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='video' >\r\n                <img src={props.media.cover_photo_url} alt='video thumbnail' className='video_thumbnail' />\r\n                {props.media.media_type === 'video' &&\r\n                    <FontAwesomeIcon icon={faPlay} className='playButton' />\r\n                }\r\n            </div>\r\n            <div className='button'>\r\n                <ButtonGroup>\r\n                    <Button onClick={copyToClipboard}>\r\n                        <span className='icon'><FontAwesomeIcon icon={faLink} /></span>\r\n                    </Button>\r\n                    {/* I was not able to find the way to trigger separate download window for this */}\r\n                    <Button>\r\n                        <span><FontAwesomeIcon icon={faDownload} /></span>\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default MediaObject","import React from 'react';\r\nimport MediaObject from './MediaObject.js';\r\nimport './CampaignVideos.css'\r\n\r\nfunction CampaignVideos(props) {\r\n    return (\r\n        <div className='video_container'>\r\n            {props.medias.map((media, i) => {\r\n                return (\r\n                    <div className='card' key={i}>\r\n                        <MediaObject media={media}/>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CampaignVideos\r\n","import React from 'react'\r\nimport CampaignVideos from './CampaignVideos';\r\nimport './CampaignTitle.css';\r\n\r\n\r\n\r\nfunction CampaignTitle(props) {\r\n    return (\r\n        <div className='campaign_box'>\r\n            {props.campaigns.map((singleCampaign, i) => {\r\n                return (\r\n                    <div key={i}>\r\n                        <div className='container'>\r\n                            <div className='left'>\r\n                                <img src={singleCampaign.campaign_icon_url} className='campaign_icon' />\r\n                            </div>\r\n                            <div className='right'>\r\n                                <p className='campaign_name'>{singleCampaign.campaign_name}</p>\r\n                                <p className='campaign_pay'>{singleCampaign.pay_per_install}per insall</p>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <CampaignVideos medias={singleCampaign.medias} />\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CampaignTitle","import React, {useState, useEffect} from 'react'\r\nimport CampaignTitle from './CampaignTitle';\r\n\r\n// This is the 'main' component that will be rendering the campaign data.\r\n// For the sake of this project, I'm feeding JSON data into this component only with hooks\r\n// From here, I'm passing in props to other sub-components \r\nfunction Campaign() {\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [campaigns, setCampaigns] = useState([]);\r\n  \r\n    useEffect(() => {\r\n      fetch(\"https://www.plugco.in/public/take_home_sample_feed\")\r\n        .then(res => res.json())\r\n        .then(\r\n          (result) => {\r\n            setIsLoaded(true);\r\n            setCampaigns(result.campaigns);\r\n          },\r\n\r\n          (error) => {\r\n            setIsLoaded(true);\r\n            setError(error);\r\n          }\r\n        )\r\n    }, [])\r\n  \r\n    if (error) {\r\n      return <div>Error: Not able to load the data successfully</div>;\r\n    } else if (!isLoaded) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      return (\r\n        <div>\r\n            <CampaignTitle campaigns={campaigns}/>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default Campaign","import React from 'react';\nimport Header from './components/Header';\nimport './App.css';\nimport Campaign from './components/Campaign';\nimport PullToRefresh from 'react-simple-pull-to-refresh';\n\nfunction App() {\n\n  function handleRefresh() {\n    window.location.reload()\n  }\n\n  return (\n    <PullToRefresh onRefresh={handleRefresh}>\n      <div className=\"App\">\n        <Header />\n        <Campaign />\n      </div>\n    </PullToRefresh>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}